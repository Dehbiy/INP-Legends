L'IA a introduit des anomalies dans le réseau de communication de l'école, entraînant des perturbations et des pannes de communication entre différents départements. Le joueur doit identifier et réparer ces anomalies pour rétablir une communication fluide et sécurisée.

le résau de communication se trouve à phelma et il est représenté par des graphes. l'objectif de ce défis et de se familiarisé avec les graphes. 

Un graphe en Python est une structure de données qui permet de représenter des relations entre différents objets. Dans un graphe, ces objets sont appelés « nœuds » ou « sommets », et les relations entre eux sont représentées par des « arêtes » ou « liens ». Les graphes peuvent être utilisés pour modéliser une grande variété de situations, comme les réseaux sociaux, les systèmes de navigation, les dépendances entre tâches dans un projet, et bien d'autres.

En Python, les graphes ne sont pas intégrés en tant que type de données standard, mais ils peuvent être implémentés de plusieurs manières, notamment en utilisant des dictionnaires et des listes. 

exemple: 

Imaginez une carte de transport public où les stations sont représentées par des nœuds et les lignes de transport qui les relient sont représentées par des arêtes. Voici un exemple simplifié en utilisant des dictionnaires et des listes :

Dictionnaire des stations : Ce dictionnaire contient les noms des stations de métro comme clés, et les listes de stations directement connectées à chacune comme valeurs.

Exemple de données :

Station A est connectée aux stations B et D.
Station B est connectée aux stations A et C.
Station C est connectée aux stations B et D.
Station D est connectée aux stations A et C.
Dans cet exemple, les relations sont bidirectionnelles, signifiant que si vous pouvez aller de la station A à la station B, vous pouvez également aller de la station B à la station A. La relation entre les stations peut être représentée en listant, pour chaque station, les autres stations auxquelles elle est directement connectée. Cette structure permet de visualiser facilement les connections directes dans le réseau de transport, et peut être étendue pour inclure des détails tels que les distances ou les temps de trajet, en transformant les arêtes en arêtes pondérées.

Imaginez un réseau social où les utilisateurs peuvent ajouter d'autres utilisateurs comme amis. Vous allez construire un graphe représentant ces relations amicales. écrit une fonction add_friend(dictionaire, person, ami) qui prend en paramétre un graphe (dictionaire) de réseau social et deux chaine de varavtères, person et amis. on recherche est ce que person existe dans le graphe. 
si oui : on ajoute une liaison entre l'ami et person (on ajoute l'ami au liste des amis de person et person au liste des amis de ami, c'est ami n'existe pas dans le graphe on le cré)
si non : on ajoute person au graphe et on construit une liaison entre person et amis (on cré une liste comme valeur de person et on ajoute ami. il faut aussi ajouter person au liste des amis de ami, c'est ami n'existe pas dans le graphe on le cré )
